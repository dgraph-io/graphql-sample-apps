type User {
    id: ID!
    email: String! @id @search(by: [hash])
    name: String
    # A user can create multiple forms.
    forms: [Form] @hasInverse(field: creator)
}

type Form {
    id: ID!
    title: String! @search(by: [hash])
    fields: [Field!]!
    responses: [Response!] @hasInverse(field: form)
    creator: User!
    isClosed: Boolean @search
}

type Field {
    id: ID!
    order: Int!
    type: FieldType!
    form: Form! @hasInverse(field: fields)
    entries: [Entry!] @hasInverse(field: field)
    title: String! @search(by: [hash])
    options: [FieldOption!]
    required: Boolean!
    count: Int
}

enum FieldType {
    Date
    NetPromoterScore
    Rating
    SingleChoice
    Text
}

type FieldOption {
    id: ID!
    order: Int!
    title: String! @search(by: [hash])
}

type Response {
    id: ID!
    form: Form!
    entries: [Entry!]!
}

type Entry {
    id: ID!
    field: Field!
    
    date: DateTime
    netPromoterScore: Int
    rating: Int
    singleChoice: FieldOption
    text: String
}