type User @auth(
  add: {or: [{ rule: """
      query ($USER: String!){
        queryUser(filter: {username: {eq: $USER}}) {
          name
        }
      }
    """
    },
    { rule:  "{$ROLE: { eq: \"ADMIN\" } }"}
  ]}
  delete: { rule:  "{$ROLE: { eq: \"ADMIN\" } }"}
){
    username: String! @id
    name: String
    posts: [Post] @hasInverse(field: createdby)
    isMod: Boolean
    likedPost: [Post]
    flaggedPost: [Post]
}
type Tag @auth(
  delete: { rule:  "{$ROLE: { eq: \"ADMIN\" } }"}
  update: { rule:  "{$ROLE: { eq: \"ADMIN\" } }"}
){
    name: String! @id @search(by: [fulltext])
    posts: [Post] @hasInverse(field: tags)
}
type Post @auth(
  add: { rule: """
        query ($USER: String!) {
            queryPost {
                createdby(filter: { username: {eq: $USER} }){
                    username
                }
            }
        } """
    }
  delete: { rule:  "{$ROLE: { eq: \"ADMIN\" } }"}
){
    id: ID!
    text: String @search(by: [fulltext])
    tags: [Tag]
    createdby: User!
    timeStamp: DateTime @search
    isApproved: Boolean @search
    likes: [User] @hasInverse(field: likedPost)
    flags: [User] @hasInverse(field: flaggedPost)
    numFlags: Int @search
    img: String
}
type Query{
  queryPostByTextAndTags(tagString: String!, postTextString:String!): [Post] @custom(dql: """
  query q($tagString: string, $postTextString: string ){
      var(func: type(Tag)) @filter(anyoftext(Tag.name,$tagString)){
        Tag.posts{
          PostIds as uid
        }
      }
      queryPostByTextAndTags(func :uid(PostIds)) @filter(anyoftext(Post.text,$postTextString) and eq(Post.isApproved,true) and lt(Post.numFlags,2)){
        id: uid
        text: Post.text
  			isApproved: Post.isApproved
  			timeStamp: Post.timeStamp
  			createdby: Post.createdby{
  				username: User.username
				}
  			likes: Post.likes{
  			  username: User.username		
				}
  			numFlags: Post.numFlags
  			flags: Post.flags{
  				username: User.username
				}
        tags: Post.tags{
          name: Tag.name
        }
        img: Post.img
      }
    }
    """)
}

# Dgraph.Authorization {"VerificationKey":"-----BEGIN PUBLIC KEY-----\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAubPeKzBpjmM/l10oCMIT\nzfU0TlDUbuIbVrMRz3WH/pEqDsXHB1DLIthlX7MAncImbOVggIqC6okItc8TePnb\n/9jx+rbCW8vMA0JnBiMI1ex9yfFWdsDtWbhxwXuthBl9dRJNiuSdfqqfQMzd3urP\nCBgwZcakyrGlICqow1rUx3ybxGsFh+plIDRW3xyMAp/i2SAKaudei3e43IXdSb/3\n9zxeMGIUfQER1sq2OEMM0qxuQwWqe3Dm2gYV8apPWMpWJkbhIoigFBroDCGb4N3n\nKaa8Y41ifDSQD8UPGE6/riRAGvRWyKrrO8KLEWGQdSkkXG2zQUD7TkW01lc+okBC\nAwIDAQAB\n-----END PUBLIC KEY-----","Header":"X-Auth0-Token","Namespace":"https://dgraph.io/jwt/claims","Algo":"RS256","Audience":["iJ55DI6OVtl57W79uGAOLQ5mCMDNyvaY"]}
